AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31

Parameters:
  DomainName:
    Type: String
    Default: seed-api.underscore76.net
  ImageTag:
    Type: String
  Repository:
    Type: String
    Default: seed-api-ecr

Globals:
  Function:
    Timeout: 300

Resources:
  HttpAPI:
    Type: AWS::Serverless::HttpApi
    Properties:
      CorsConfiguration:
        AllowCredentials: true
        AllowHeaders:
          - '*'
          - "authorization"
          - "content-type"
        AllowMethods:
          - '*'
        AllowOrigins: 
          - 'https://{{resolve:ssm:/route53/hostedzone/name}}'
          - 'https://web.{{resolve:ssm:/route53/hostedzone/name}}'
          - 'http://localhost:5173'
        ExposeHeaders:
          - '*'
        MaxAge: 300
      DisableExecuteApiEndpoint: true
      Domain: 
        DomainName: !Ref DomainName
        CertificateArn: '{{resolve:ssm:/route53/hostedzone/certificate}}'
        Route53:
          HostedZoneId: '{{resolve:ssm:/route53/hostedzone/id}}'
  
  AppSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Delete
    UpdateReplacePolicy: Retain
    Properties:
      Name: seed-api-secret
      Description: The secret for the app
      GenerateSecretString:
        SecretStringTemplate: '{}'
        GenerateStringKey: "secret-key"
        PasswordLength: 30

  LambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      ImageUri: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${ImageTag}
      MemorySize: 512 
      Environment: 
        Variables:
          SECRET_ARN: !Ref AppSecret
      Events:
        HttpApi:
          Type: HttpApi
          Properties:
            ApiId: !Ref HttpAPI
      Role: !GetAtt  LambdaRole.Arn

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaPolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - '{{resolve:ssm:/seed-job-ddb/table-arn}}'
              - Effect: Allow
                Action:
                  - ssm:GetParameter
                Resource: 
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/seed-job-ddb/table-name'
                  - !Sub 'arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter/route53/hostedzone/name'
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref AppSecret
  
  GatewayInvokeLambdaPermissions:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref LambdaFunction
      Principal: apigateway.amazonaws.com
  